openapi: 3.0.0
info:
  title: School Management API
  version: 1.0.0
  description: API for school admin storage and management
servers:
  - url: https://cse-341-project-m8mw.onrender.com/api
    description: Production server
  - url: http://localhost:5500/api
    description: Local development server
components:
  securitySchemes:
    googleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://cse-341-project-m8mw.onrender.com/api/auth/google
          tokenUrl: https://cse-341-project-m8mw.onrender.com/api/auth/google/callback
          scopes:
            openid: OpenID access
            profile: View your profile info
            email: View your email address
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    user:
      type: object
      properties:
        _id:
          type: string
          description: Autogenerated ID of the user
          readOnly: true
        name:
          type: string
          description: Full name of the user
          example: Jane Doe
        email:
          type: string
          format: email
          description: Email address
          example: janedoe@school.edu
        password:
          type: string
          description: Hashed password
          example: $2a$10$abc...
          writeOnly: true
        role:
          type: string
          enum:
            - student
            - staff
            - admin
          description: User role
          example: student
        googleId:
          type: string
          description: Google OAuth ID (if authenticated via Google)
          example: '10987654321'
          nullable: true
        provider:
          type: string
          enum:
            - local
            - google
          description: Authentication provider
          example: local
          default: google
        isActive:
          type: boolean
          description: User active status
          example: true
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - email
        - password
        - role
    class:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
          example: SS1 A
        level:
          type: string
          example: '100'
        instructor:
          type: string
          format: objectId
          description: ID of the instructor (staff user)
          readOnly: true
          example: 60f6e9f2b7a1c142d8ef8c12
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
        - level
        - instructor
    department:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        name:
          type: string
          example: Mathematics
        description:
          type: string
          example: Handles all mathematics courses
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - name
    course:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        title:
          type: string
          example: Algebra 101
        description:
          type: string
          example: Introductory algebra course
        department:
          type: string
          example: 60f6e9f2b7a1c142d8ef8c11
        instructor:
          type: string
          example: 60f6e9f2b7a1c142d8ef8c12
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - title
        - department
        - instructor
    enrollment:
      type: object
      properties:
        _id:
          type: string
          readOnly: true
        student:
          type: string
          example: 60f6e9f2b7a1c142d8ef8c10
        course:
          type: string
          example: 60f6e9f2b7a1c142d8ef8c11
        enrolledAt:
          type: string
          format: date-time
          example: '2025-01-10T12:00:00Z'
        grade:
          type: string
          enum:
            - A
            - B
            - C
            - D
            - E
            - F
            - I
            - W
            - null
          example: A
        status:
          type: string
          enum:
            - enrolled
            - completed
            - withdrawn
          example: enrolled
        createdAt:
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - student
        - course
security:
  - bearerAuth: []
  - googleOAuth: []
paths:
  /auth/google:
    get:
      summary: Initiate Google OAuth2 login
      tags:
        - Authentication
      description: Redirects the user to Google's OAuth2 authorization page.
      security:
        - googleOAuth: []
      responses:
        '302':
          description: Redirect to Google OAuth2
  /auth/google/callback:
    get:
      summary: Google OAuth2 callback
      tags:
        - Authentication
      description: Handles the callback from Google and returns a JWT
      parameters:
        - in: query
          name: code
          schema:
            type: string
          required: true
          description: Authorization code from Google
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    type: object
                  token:
                    type: string
  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      description: Invalidates the JWT token by adding it to a blacklist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized or token already revoked
  /class:
    post:
      summary: Create a new class
      tags:
        - Class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '400':
          description: Invalid input
    get:
      summary: Get all classes
      tags:
        - Class
      responses:
        '200':
          description: List of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/class'
  /class/{id}:
    get:
      summary: Get a class by ID
      tags:
        - Class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The class ID
      responses:
        '200':
          description: Class found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '404':
          description: Class not found
    put:
      summary: Update a class by ID
      tags:
        - Class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The class ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/class'
      responses:
        '200':
          description: Class updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/class'
        '400':
          description: Invalid input
        '404':
          description: Class not found
    delete:
      summary: Delete a class member by ID
      tags:
        - Class
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The class ID
      responses:
        '200':
          description: Class member deleted
        '404':
          description: Class not found
  /course:
    post:
      summary: Create a new course
      tags:
        - Course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/course'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
        '400':
          description: Invalid input
    get:
      summary: Get all courses
      tags:
        - Course
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/course'
  /course/{id}:
    get:
      summary: Get a course by ID
      tags:
        - Course
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The course ID
      responses:
        '200':
          description: Course found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
        '404':
          description: Course not found
    put:
      summary: Update a course by ID
      tags:
        - Course
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The course ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/course'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/course'
        '400':
          description: Invalid input
        '404':
          description: Course not found
    delete:
      summary: Delete a course by ID
      tags:
        - Course
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The course ID
      responses:
        '204':
          description: Course deleted successfully
        '404':
          description: Course not found
  /department:
    post:
      summary: Create a new department
      tags:
        - Department
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/department'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/department'
        '400':
          description: Invalid input
    get:
      summary: Get all department
      tags:
        - Department
      responses:
        '200':
          description: List of department
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/department'
  /dpeartment/{id}:
    get:
      summary: Get a department by ID
      tags:
        - Department
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The department ID
      responses:
        '200':
          description: Department found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/department'
        '404':
          description: User not found
  /deparment/{id}:
    put:
      summary: Update a deparment by ID
      tags:
        - Department
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The department ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/department'
      responses:
        '200':
          description: Department updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/department'
        '400':
          description: Invalid input
        '404':
          description: Department not found
  /department/{id}:
    delete:
      summary: Delete a department member by ID
      tags:
        - Department
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The department ID
      responses:
        '200':
          description: Department member deleted
        '404':
          description: Department not found
  /enrollment:
    post:
      summary: Enroll a student in a course
      tags:
        - Enrollment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/enrollment'
      responses:
        '201':
          description: Student enrolled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollment'
        '400':
          description: Invalid input
        '404':
          description: Student or course not found
    get:
      summary: Get all enrollments
      tags:
        - Enrollment
      responses:
        '200':
          description: List of all enrollments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/enrollment'
  /enrollment/student/{studentId}:
    get:
      summary: Get enrollments for a specific student
      tags:
        - Enrollment
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
          description: The student ID
      responses:
        '200':
          description: List of student's enrollments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/enrollment'
        '404':
          description: Student not found
  /enrollment/course/{courseId}:
    get:
      summary: Get enrollments for a specific course
      tags:
        - Enrollment
      parameters:
        - in: path
          name: courseId
          required: true
          schema:
            type: string
          description: The course ID
      responses:
        '200':
          description: List of course enrollments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/enrollment'
        '404':
          description: Course not found
  /enrollment/{id}:
    put:
      summary: Update enrollment (grade or status)
      tags:
        - Enrollment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The enrollment ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/enrollment'
      responses:
        '200':
          description: Enrollment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/enrollment'
        '400':
          description: Invalid input
        '404':
          description: Enrollment not found
  /enrollment/{id}/withdraw:
    patch:
      summary: Withdraw a student from a course
      tags:
        - Enrollment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The enrollment ID
      responses:
        '200':
          description: Student withdrawn successfully
        '404':
          description: Enrollment not found
  /user:
    post:
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid input
    get:
      summary: Get all users
      tags:
        - User
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/user'
  /user/{email}:
    get:
      summary: Get a user by email
      tags:
        - User
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: The user email
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
  /user/{id}:
    get:
      summary: Get a user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: User not found
    put:
      summary: Update a user by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '400':
          description: Invalid input
        '404':
          description: User not found
    delete:
      summary: Delete a user member by ID
      tags:
        - User
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: User member deleted
        '404':
          description: User not found
tags:
  - name: Class
    description: API for class information
  - name: Course
    description: API for course management
  - name: Department
    description: API for department information
  - name: Enrollment
  - name: User
    description: API for user information
